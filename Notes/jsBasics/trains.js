let directions = "()(((()())))()))()(())(()()()))))())(()((((()()()(()))())()((((((()))(()))())())())(()()))(((()())(())))))()))((()))()(())(()))())()(((())(()))()))(()(()())())()())))))()))(()()))(()()()()))(((()())(()()))))(()((())))((()((())()((())(()))(()))))()(((())))(((()))(()()())))))((()(()(()()(((()())))()(()))(()((()((())(())())(()))))()()(((()(()(()(())))))(()(((()(()))(()((()((())()))((((((()()))()(((()))()()(())()(((()())))()())())(()()(()(()((()()(((())))))(()((()())()))))(()((()((((())))))))(())((())))))))))))(())))())))((((()(()((())((()(()()(())))((()(()()(()))(())((((()()())()(((()))()(())))()))((((((((()(((())(())()((()()(()())(()()(())(())())()(()))())(()((()())))()))(()()((())()()))(()(()))(()))())(()((())))(()((()()((()))))()(((()(()()((()())())()()())))()((()()()))()((())()(()(()))((()))))(()())(())(()(()(())(((()())(((())))(()))))(((())))(()(())()()))(())()(()()(())))()())()(((()(()()())(((()()(()()()((((((())()))(()((()()(())))))))()(((()))(((()()()()((((()(())(()(()(()()))(())()()()((()))))()())(())))()()()(()(()((())((((())()((((()))((((()))((()(()))()))((())))((()(()(())())(())()))(()(()(()((()(())(()(((()())))((()()((())())()())()))))))()))(()((()(())())))))(()())(()((((())())))()()))()((((()()()))()((()((((()))((((()((((()()()()()))))())(())))()))())((()()))()())((()))))())((()))()()((((((((()(())())(()(()((()(()(())(()(()((((()))(()())())()((()())((()())(()((((())(()((()))(()((()(((()()()())(())(()((((()())()))()()()())))())()))))(()())(((()())()(()()))())((((())))))((()))((())())())))(()()())()()())())(())(()(())))()(()(())(()((((()))(((()(()()))()(())()(())))()((()(()(()()())(())()(()()))()))))((()(()()))(()())())((((((())()()))((()))))()((())((()())())(()()))()))((((()())(()()(((()(()))))(()()()()())((()(()))((()(()()))(())()((()())()()((())((()())))))((())())()()))()))(())((()))(())((((())))()()()())))())()(()))(()(())()())(((()))()))((()(())()())()(((())(()(()))))()(()((()())))))())))()(()()()()((()))(())(())))))((((()))(((()())(((()()())(()()()())((())()())()(((()))))))((()(((()(()(()))(())()()(())()()()(()()((((()(((((()((())))((()()((((()()))(()())(()))))))(())(()()))((((()))())(()((())))()))))(((()(())())()(()))))((())))))()()))((()())(()())))(())(((()))((())())(()(((())())(((())))()()))())(((()(())((()()(())))(()(()()(((((()()(()))((())((()((((()((((((((((((()()())))))((((())()(((())))))))))())(()(()(()(()((()(()(()(())((()))()()))()((((()))(((()(())((())(())()()((())()(()(((())(()(((()))(((((()))())()(())((()((((()())())(()))()()((((()(())()(()))(((((()()(()())))((())())(()))()(()()(()()())((()))()))())(())))(()())())))()()))())()()()(((((())))))()()())(()())))))(()))((()()(()((()(()())()((()())))))((()())()())))(()(()()())(()))))()(((((((()()()()()(())())()((((()(()))()()))(()))())(()))))))))))())()))(())(((())(((()))((((()()(()()))))))())())()(()))()()())))(((((()())())))(()()(()(((((()))((((()())((())((()((()))))()()(())(())()(()(((())()((()))))(())(((())())))(())(((((()()()))((()((())))())())((())())())))())(((()())())))(()()))((())))((()(()())((((())(()())(((())))))))((()(()(((()()()(((((())()))))()))()))((())))()()))(()())(())))))((((((())((())()(()))()(((())))()(()))()(()()((()(())())(())(())((((()())(())((()(()(((()())())())()))((()))))())(()))))((())()(()(())())()())()))))()()(()(()))(()()))))()())))))())(()())())(()))()((()(()(()))((()((()(())))()()((()()((((()()((()(()))())()(()))()()()(((()))((())))))((((((((((((())))())()))))((((()()((()((((())))())((())()()((()))()((()()())(()))(()((())()()())(()))(((()((())()((())(()()((()))(()())((()))())((())))))(()())()))(((((()((()((()(())()))(())())((())())(())))))))(()()()())(((())((((())))())(((()))()()))()))))))(()((()(()((((())(((())(())()))(())()))())))(())(((())(()(()()((()((()))))()()()(())((()(()())(()(()))())(())(((()(((()())((((()((())((((())(()()())())()(())))))())())))))()(()))))()()))((())()()(()()(()()))((()())(((()()()(((())()()))(()(())()()))))))()()))(((()((()((()(())(((()())))))(()())((((()())))(()())(())))())((())(()(())())()))()()(())(())())()())(())))))((())(())))(())(())))(()()()))(()((())((((())))))())()()((((()())()))))()()))(()))))(())((((()(()()()()))))()()(((()((())())((()())())(())((())))))(((((())))((((()()))(()))))()))))()())()))(())(())))((((()(()(()()()((((()((((())))(())))))()))))()()(())))))()((())))((()(())((((()(((()))(()(()()))((())((())())))((())))((((((((())))((((()())(((()))))()())))))(()())))()((()()()()(()()(((())(()((())()((()())(((()()(((()((()(((()(()((()))))()()((()(()()(())))()()()()()(()()((()))(()()))((((((()(()((()(((()(()()((()()()(())()()))(()(()(()))()())())())(())))))(()())()(())))))(()()())())((((())()(((((()((()((()(()()((())(((((())()(()(()))(()(((((((()())())(()()))()((()))())((((()((((())())()((((()()()()))()(()()(()(()())(()())))()(()()(()()()())((()()((((())()()((((((()(((()((()(()(()(()))(()(()((())()))()())((()((()))())((()()()))(())((()(()(())(((()(()((()))()()())())(()(()((()(())(()()()(()())))((()((())))()(()((((())(()((()()()(()))))())()()))()(()((()(()(())()(())(())))()((((()((((((((()))()()())))())()((()(((()))()))(()((((()())())((((())()()))(()))(((()))(()(()))()(()))()((((((()()(((((())()(()(()(((())))))))())))))((())(()())(()()())((())()()())))()()(((((())))()))))(())(())())((((()(()()(()))((()))((()(())()(())))(()))(()))(())))(()))())))()((((((((((())()()))((((((()()))))())))()(((((((()())))(((()()))))()()(())(()(())())(())()))))()()()))(()((((()((((())(())((())))())((()()))()(((())()((()())()(()()()((()(((((()(()()()((((()()))))(((()(()(())()))((()))((()()())))(()((()(()((()()()()()((())(((()())()()((())()(((()))(()(())))))()())(((()()))()))((())((()(()))()((((()))()(())()()))))())())(()((((((()))((()()(()())))(())())))())(()())()((((((()()((()()))())((((()()(())()))())()()(((())))))))((()(()()(((((((((()(())(())(((()()()((((()())(()(((()(())()()()))())()())))()())))(()))())()()))())()()))()((())()())))(((())()(((()()(())(((()(()()()())((()))((()()((()()))((())(())(()(()((())())())()(()))))()())(((((()()()(())))((((()()()(()((())(()))())))))))(((())())()()(()(()()()))))(()())((()()))()()(()))())))(())(((())()()))(()()())(((()()())))(((()())(()))()))))))()()))()))()()(()))(()(()(()()(())(()()()))())(()()(()((())))(()())())((()()))()(((())))()(()))((()()((((((()))))(())((())(((((()())(()))(()))((((()))))(())(((()()())(((()()()()()()))(()()())())))()(()))))()())((((()()())())))()()))()())))))()(((((()(((()((())()()()((())))()))())()(()()))(()(())))))(()()(()((()((()(())((()((()())))()())))()()())()(()()(()(((()()((((((()())((()())()(()(((()))))())()())()())()(()())()))))))))))((()))(()))))))(()((())((()((()(()(()(()))()(()))()())())()())()(()(()))))()))(()((((((((((())))()()()(())(())(())(((()())()()((()()()(())))((())())()((((())(()))())(((()(()(((()((())(())))))))))))()(((((((()))))()(()))()))))(())(((()((((())((()(())()()())(()))())((()()()))(()(())())))())((()))((((()()))((())(()()((()()))))((((())(()))((()()((()(())()()(()()(()((()())(())))(()((()())()()()((())((()())(()(()())()(()()))))(())))()))))())(((()()()()(()("

//YEAR 1______________________________________________________________________________________

//This code will determine how far away the train will be from 0
let progression = 0
let wests = 0
let easts = 0


//Every time it goes to the east, it adds 1 to the overall progression. Whenever the train goes west, it removes one. It also will count how many times each one happens.


for(let i = 0; i < directions.length; i++){
    if(directions[i] == ")"){
        progression++
        easts++
    }else if (directions[i] == "("){
        progression--
        wests++
    }
}


//This code is to make sure the math is correct
console.log("Easts: " + easts)
console.log("Wests: " + wests)
console.log(easts-wests)


//If the train went farther east, it should be greater than zero and would have gone that many stations. If it went farther west, the number will be negative, so I flipped the value for reading purposes. If both evened out, it never moved.


if(progression > 0){
    console.log("The train moved " + progression + " stations east")
}else if(progression < 0){
    let westwardProgression = progression * -1
    console.log("The train moved " + westwardProgression + " stations west")
}else{
    console.log("The train didn't move")
}
console.log("_____________________________________________________________")

//YEAR 2__________________________________________________________________________________________________________

//resetting variables
progression = 0
wests = 0
easts = 0
//Every time it goes to the east, it adds 1 to the overall progression. Whenever the train goes west, it removes one. It also will count how many times each one happens.
for(let i = 0; i < directions.length; i++){
    if(directions[i] == ")"){
        progression++
        easts++
    }
    if(directions[i] == "("){
        if(progression != 0){
            progression--
            wests++
        }
       
    }
}

console.log("Easts: " + easts)
console.log("Wests: " + wests)
console.log(easts-wests)


//checks to see if the number is positive
if(progression > 0){
    console.log("The train moved " + progression + " stations east")
}else{
    console.log("The train didn't move")
}
console.log("_____________________________________________________________")


//YEAR 3________________________________________________________________
progression = 0
wests = 0
easts = 0
//Every time it goes to the east, it adds 1 to the overall progression. Whenever the train goes west, it removes one. It also will count how many times each one happens.
for(let j = 0; j < directions.length; j++){
    if(directions[j] == ")"){
        if(directions[j] == directions[j+1]){
            j++
        }
        progression++
        easts++
    }else if(directions[j] == "("){
        //checks if the next symbol is the same. If so, it adds to j in order to skip the next symbol when the for loop runs again
        if(directions[j] == directions[j+1]){
            j++
        }
        progression--
        wests++
       
    }
}


console.log("Easts: " + easts)
console.log("Wests: " + wests)
console.log(easts-wests)


//
if(progression > 0){
    console.log("The train moved " + progression + " stations east")
}else if(progression < 0){
    westwardProgression = progression * -1
    console.log("The train moved " + westwardProgression + " stations west")
}else{
    console.log("The train didn't move")
}
console.log("_____________________________________________________________")

//YEAR 4 ___________________________________________________________________________________________________________________________________

progression = 0
wests = 0
easts = 0
let digitOne = 0
let digitTwo = 0
let digitThree = 0
let binaryValue = 0

for(let o = 0; o < directions.length; o++){
    //reset all of the variables     
    digitOne = 0 
    digitTwo = 0
    digitThree = 0
    binaryValue = 0
    //Assign binary values to the variables
    if(directions[o+1] == "("){
        digitOne = 1
    }
    if(directions[o+2] == "("){
        digitOne = 1
    }
    if(directions[o+3] == "("){
        digitOne = 1
    }
    binaryValue = (digitOne * 4) + (digitTwo * 2) + digitThree
    
    //Determines
    if(directions[o] == ")"){
        progression+= binaryValue
        easts+= binaryValue
    }else if (directions[o] == "("){
        progression -= binaryValue
        wests += binaryValue
    }
    o++
    o++
    o++
}


console.log("Easts: " + easts)
console.log("Wests: " + wests)
console.log(easts-wests)



if(progression > 0){
    console.log("The train moved " + progression + " stations east")
}else if(progression < 0){
    westwardProgression = progression * -1
    console.log("The train moved " + westwardProgression + " stations west")
}else{
    console.log("The train didn't move")
}
